// This file is automatically generated.
using System;
using System.Text;
using System.Runtime.InteropServices;
using Steam4NET.Attributes;

namespace Steam4NET
{

	[InterfaceVersion("CLIENTMATCHMAKINGSERVERS_INTERFACE_VERSION001")]
	public interface IClientMatchmakingServers
	{
		[VTableSlot(0)]
		TClass RequestInternetServerList<TClass>(UInt32 iApp, ref MatchMakingKeyValuePair_t ppchFilters, UInt32 nFilters, ref ISteamMatchmakingServerListResponse002 pRequestServersResponse) where TClass : class;
		[VTableSlot(1)]
		TClass RequestLANServerList<TClass>(UInt32 iApp, ref ISteamMatchmakingServerListResponse002 pRequestServersResponse) where TClass : class;
		[VTableSlot(2)]
		TClass RequestFriendsServerList<TClass>(UInt32 iApp, ref MatchMakingKeyValuePair_t ppchFilters, UInt32 nFilters, ref ISteamMatchmakingServerListResponse002 pRequestServersResponse) where TClass : class;
		[VTableSlot(3)]
		TClass RequestFavoritesServerList<TClass>(UInt32 iApp, ref MatchMakingKeyValuePair_t ppchFilters, UInt32 nFilters, ref ISteamMatchmakingServerListResponse002 pRequestServersResponse) where TClass : class;
		[VTableSlot(4)]
		TClass RequestHistoryServerList<TClass>(UInt32 iApp, ref MatchMakingKeyValuePair_t ppchFilters, UInt32 nFilters, ref ISteamMatchmakingServerListResponse002 pRequestServersResponse) where TClass : class;
		[VTableSlot(5)]
		TClass RequestSpectatorServerList<TClass>(UInt32 iApp, ref MatchMakingKeyValuePair_t ppchFilters, UInt32 nFilters, ref ISteamMatchmakingServerListResponse002 pRequestServersResponse) where TClass : class;
		[VTableSlot(6)]
		void ReleaseRequest(Byte[] hServerListRequest);
		[VTableSlot(7)]
		gameserveritem_t GetServerDetails(Byte[] hServerListRequest, Int32 iServer);
		[VTableSlot(8)]
		void CancelQuery(Byte[] hServerListRequest);
		[VTableSlot(9)]
		void RefreshQuery(Byte[] hServerListRequest);
		[VTableSlot(10)]
		bool IsRefreshing(Byte[] hServerListRequest);
		[VTableSlot(11)]
		Int32 GetServerCount(Byte[] hServerListRequest);
		[VTableSlot(12)]
		void RefreshServer(Byte[] hServerListRequest, Int32 iServer);
		[VTableSlot(13)]
		Int32 PingServer(UInt32 unIP, UInt16 usPort, ref ISteamMatchmakingPingResponse pRequestServersResponse);
		[VTableSlot(14)]
		Int32 PlayerDetails(UInt32 unIP, UInt16 usPort, ref ISteamMatchmakingPlayersResponse pRequestServersResponse);
		[VTableSlot(15)]
		Int32 ServerRules(UInt32 unIP, UInt16 usPort, ref ISteamMatchmakingRulesResponse pRequestServersResponse);
		[VTableSlot(16)]
		void CancelServerQuery(Int32 hServerQuery);
		[VTableSlot(17)]
		void _RequestXxxServerList_v001(EMatchMakingType eType, UInt32 iApp, ref MatchMakingKeyValuePair_t ppchFilters, UInt32 nFilters, ref ISteamMatchmakingServerListResponse001 pRequestServersResponse);
		[VTableSlot(18)]
		gameserveritem_t _GetServerDetails_v001(EMatchMakingType eType, Int32 iServer);
		[VTableSlot(19)]
		void _CancelQuery_v001(EMatchMakingType eType);
		[VTableSlot(20)]
		void _RefreshQuery_v001(EMatchMakingType eType);
		[VTableSlot(21)]
		bool _IsRefreshing_v001(EMatchMakingType eType);
		[VTableSlot(22)]
		Int32 _GetServerCount_v001(EMatchMakingType eType);
		[VTableSlot(23)]
		void _RefreshServer_v001(EMatchMakingType eType, Int32 iServer);
	};
}
