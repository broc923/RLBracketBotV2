// This file is automatically generated.
using System;
using System.Text;
using System.Runtime.InteropServices;
using Steam4NET.Attributes;

namespace Steam4NET
{

	[InterfaceVersion("SteamBilling002")]
	public interface ISteamBilling002
	{
		[VTableSlot(0)]
		bool InitCreditCardPurchase(UInt32 nPackageID, UInt32 nCardIndex, bool bStoreCardInfo);
		[VTableSlot(1)]
		bool InitPayPalPurchase(UInt32 nPackageID);
		[VTableSlot(2)]
		bool GetActivationCodeInfo(string pchActivationCode);
		[VTableSlot(3)]
		bool PurchaseWithActivationCode(string pchActivationCode);
		[VTableSlot(4)]
		bool GetFinalPrice();
		[VTableSlot(5)]
		bool CancelPurchase();
		[VTableSlot(6)]
		bool CompletePurchase();
		[VTableSlot(7)]
		bool UpdateCardInfo(UInt32 nCardIndex);
		[VTableSlot(8)]
		bool DeleteCard(UInt32 arg0);
		[VTableSlot(9)]
		bool GetCardList();
		[VTableSlot(10)]
		bool Obsolete_GetLicenses();
		[VTableSlot(11)]
		bool CancelLicense(UInt32 nPackageID, Int32 nCancelReason);
		[VTableSlot(12)]
		bool GetPurchaseReceipts(bool bUnacknowledgedOnly);
		[VTableSlot(13)]
		bool SetBillingAddress(UInt32 nCardIndex, string pchFirstName, string pchLastName, string pchAddress1, string pchAddress2, string pchCity, string pchPostcode, string pchState, string pchCountry, string pchPhone);
		[VTableSlot(14)]
		bool GetBillingAddress(UInt32 nCardIndex, StringBuilder pchFirstName, StringBuilder pchLastName, StringBuilder pchAddress1, StringBuilder pchAddress2, StringBuilder pchCity, StringBuilder pchPostcode, StringBuilder pchState, StringBuilder pchCountry, StringBuilder pchPhone);
		[VTableSlot(15)]
		bool SetShippingAddress(string pchFirstName, string pchLastName, string pchAddress1, string pchAddress2, string pchCity, string pchPostcode, string pchState, string pchCountry, string pchPhone);
		[VTableSlot(16)]
		bool GetShippingAddress(StringBuilder pchFirstName, StringBuilder pchLastName, StringBuilder pchAddress1, StringBuilder pchAddress2, StringBuilder pchCity, StringBuilder pchPostcode, StringBuilder pchState, StringBuilder pchCountry, StringBuilder pchPhone);
		[VTableSlot(17)]
		bool SetCardInfo(UInt32 nCardIndex, ECreditCardType eCreditCardType, string pchCardNumber, string pchCardHolderFirstName, string pchCardHolderLastName, string pchCardExpYear, string pchCardExpMonth, string pchCardCVV2);
		[VTableSlot(18)]
		bool GetCardInfo(UInt32 nCardIndex, ref ECreditCardType eCreditCardType, StringBuilder pchCardNumber, StringBuilder pchCardHolderFirstName, StringBuilder pchCardHolderLastName, StringBuilder pchCardExpYear, StringBuilder pchCardExpMonth, StringBuilder pchCardCVV2);
		[VTableSlot(19)]
		UInt32 GetLicensePackageID(UInt32 nLicenseIndex);
		[VTableSlot(20)]
		UInt32 GetLicenseTimeCreated(UInt32 nLicenseIndex);
		[VTableSlot(21)]
		UInt32 GetLicenseTimeNextProcess(UInt32 nLicenseIndex);
		[VTableSlot(22)]
		Int32 GetLicenseMinuteLimit(UInt32 nLicenseIndex);
		[VTableSlot(23)]
		Int32 GetLicenseMinutesUsed(UInt32 nLicenseIndex);
		[VTableSlot(24)]
		EPaymentMethod GetLicensePaymentMethod(UInt32 nLicenseIndex);
		[VTableSlot(25)]
		ELicenseFlags GetLicenseFlags(UInt32 nLicenseIndex);
		[VTableSlot(26)]
		string GetLicensePurchaseCountryCode(UInt32 nLicenseIndex);
		[VTableSlot(27)]
		UInt32 GetReceiptPackageID(UInt32 nReceiptIndex);
		[VTableSlot(28)]
		EPurchaseStatus GetReceiptStatus(UInt32 nReceiptIndex);
		[VTableSlot(29)]
		EPurchaseResultDetail GetReceiptResultDetail(UInt32 nReceiptIndex);
		[VTableSlot(30)]
		UInt32 GetReceiptTransTime(UInt32 nReceiptIndex);
		[VTableSlot(31)]
		UInt64 GetReceiptTransID(UInt32 nReceiptIndex);
		[VTableSlot(32)]
		EPaymentMethod GetReceiptPaymentMethod(UInt32 nReceiptIndex);
		[VTableSlot(33)]
		UInt32 GetReceiptBaseCost(UInt32 nReceiptIndex);
		[VTableSlot(34)]
		UInt32 GetReceiptTotalDiscount(UInt32 nReceiptIndex);
		[VTableSlot(35)]
		UInt32 GetReceiptTax(UInt32 nReceiptIndex);
		[VTableSlot(36)]
		UInt32 GetReceiptShipping(UInt32 nReceiptIndex);
		[VTableSlot(37)]
		string GetReceiptCountryCode(UInt32 nReceiptIndex);
		[VTableSlot(38)]
		UInt32 GetNumLicenses();
		[VTableSlot(39)]
		UInt32 GetNumReceipts();
		[VTableSlot(40)]
		bool PurchaseWithMachineID(UInt32 nPackageID, string pchCustomData);
		[VTableSlot(41)]
		bool InitClickAndBuyPurchase(UInt32 nPackageID, Int64 nAccountNum, string pchState, string pchCountryCode);
		[VTableSlot(42)]
		bool GetPreviousClickAndBuyAccount(ref Int64 pnAccountNum, StringBuilder pchState, StringBuilder pchCountryCode);
	};
}
