// This file is automatically generated.
using System;
using System.Text;
using System.Runtime.InteropServices;
using Steam4NET.Attributes;

namespace Steam4NET
{

	[InterfaceVersion("STEAMUSERSTATS_INTERFACE_VERSION005")]
	public interface ISteamUserStats005
	{
		[VTableSlot(0)]
		bool RequestCurrentStats();
		[VTableSlot(1)]
		bool GetStat(string pchName, ref float pData);
		[VTableSlot(2)]
		bool GetStat(string pchName, ref Int32 pData);
		[VTableSlot(3)]
		bool SetStat(string pchName, float fData);
		[VTableSlot(4)]
		bool SetStat(string pchName, Int32 nData);
		[VTableSlot(5)]
		bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength);
		[VTableSlot(6)]
		bool GetAchievement(string pchName, ref bool pbAchieved);
		[VTableSlot(7)]
		bool SetAchievement(string pchName);
		[VTableSlot(8)]
		bool ClearAchievement(string pchName);
		[VTableSlot(9)]
		bool StoreStats();
		[VTableSlot(10)]
		Int32 GetAchievementIcon(string pchName);
		[VTableSlot(11)]
		string GetAchievementDisplayAttribute(string pchName, string pchKey);
		[VTableSlot(12)]
		bool IndicateAchievementProgress(string pchName, UInt32 nCurProgress, UInt32 nMaxProgress);
		[VTableSlot(13)]
		UInt64 RequestUserStats(CSteamID steamIDUser);
		[VTableSlot(14)]
		bool GetUserStat(CSteamID steamIDUser, string pchName, ref float pData);
		[VTableSlot(15)]
		bool GetUserStat(CSteamID steamIDUser, string pchName, ref Int32 pData);
		[VTableSlot(16)]
		bool GetUserAchievement(CSteamID steamIDUser, string pchName, ref bool pbAchieved);
		[VTableSlot(17)]
		bool ResetAllStats(bool bAchievementsToo);
		[VTableSlot(18)]
		UInt64 FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);
		[VTableSlot(19)]
		UInt64 FindLeaderboard(string pchLeaderboardName);
		[VTableSlot(20)]
		string GetLeaderboardName(UInt64 hSteamLeaderboard);
		[VTableSlot(21)]
		Int32 GetLeaderboardEntryCount(UInt64 hSteamLeaderboard);
		[VTableSlot(22)]
		ELeaderboardSortMethod GetLeaderboardSortMethod(UInt64 hSteamLeaderboard);
		[VTableSlot(23)]
		ELeaderboardDisplayType GetLeaderboardDisplayType(UInt64 hSteamLeaderboard);
		[VTableSlot(24)]
		UInt64 DownloadLeaderboardEntries(UInt64 hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, Int32 nRangeStart, Int32 nRangeEnd);
		[VTableSlot(25)]
		bool GetDownloadedLeaderboardEntry(UInt64 hSteamLeaderboardEntries, Int32 index, ref LeaderboardEntry001_t pLeaderboardEntry, ref Int32 pDetails, Int32 cDetailsMax);
		[VTableSlot(26)]
		UInt64 UploadLeaderboardScore(UInt64 hSteamLeaderboard, Int32 nScore, ref Int32 pScoreDetails, Int32 cScoreDetailsCount);
	};
}
